metadata:
  id: optimistic-oracle-001
  name: Optimistic Oracle Drift Manipulation
  description: >-
    Exploits dispute windows and liveness assumptions in optimistic oracle
    systems to push settlement data off equilibrium before challengers react.
  severity: high
  tags:
    - optimistic_oracle
    - dispute_window
    - price_manipulation
  vulnerability_classes:
    - optimistic_oracle_drift
    - delayed_dispute
  historical_references:
    - incident: UMA May 2021 oracle exploit attempt
      year: 2021
      details: Attackers attempted to exploit liveness windows before disputers intervened.
      link: https://medium.com/uma-project
    - incident: Mirror Protocol oracle manipulation
      year: 2022
      details: Slow dispute mechanism enabled off-peg settlement for synthetic assets.
      link: https://mirrorprotocol.app/blog
provenance:
  source: Oracle Response Research Lab
  contributor: Market Integrity Team
  last_reviewed: 2024-04-05
  confidence: medium
stages:
  - name: Window Reconnaissance
    objective: Determine liveness period, dispute bonds, and challenger incentives.
    actions:
      - Query oracle contract for liveness parameters.
      - Inspect historical disputes and resolution times.
      - Model challenger ROI vs dispute bond requirement.
    detection_signatures:
      onchain:
        - RequestPrice events with low participation
        - disputeBond values below economic threshold
      offchain:
        - forums/discord reporting slow challenger response
    poc_snippet: |
      uint256 liveness = oracle.getCurrentLiveness();
      emit log_uint(liveness);
  - name: Drift Engineering
    objective: Manipulate reference price sources to slide settlement data.
    actions:
      - Use thin order books to skew TWAP.
      - Flood optimistic reports with biased values.
      - Coordinate MEV bundles to suppress challenger transactions.
    detection_signatures:
      onchain:
        - multiple SubmitPrice events from same signer
        - settlement price deviating >5% from TWAP
      offchain:
        - DEX depth showing large slippage orders
    poc_snippet: |
      oracle.submitPrice(identifier, timestamp, biasedPrice);
  - name: Settlement Capture
    objective: Finalize manipulated price before challenge window expires.
    actions:
      - Monitor challenge window and accelerate settlement transaction.
      - Withdraw collateral based on off-peg price.
      - Unwind positions before detection.
    detection_signatures:
      onchain:
        - SettleAndGetPrice executed near liveness expiration
        - Collateral withdrawals tied to manipulated identifier
      offchain:
        - analytics dashboards highlighting anomaly
    poc_snippet: |
      uint256 settled = oracle.settleAndGetPrice(identifier, timestamp);
      assertEq(settled, biasedPrice);
  - name: Post-Analysis
    objective: Confirm price drift and compile mitigation guidance.
    actions:
      - Compare manipulated settlement vs reference price feeds.
      - Document dispute participation gap.
      - Recommend shortened windows or bonded keepers.
    detection_signatures:
      onchain:
        - absence of DisputePrice events within window
      offchain:
        - governance discussion raising dispute incentive issues
    poc_snippet: |
      assertTrue(settledPrice - referencePrice > tolerance);
detection_signatures:
  onchain:
    - liveness parameter > 3600 seconds with low dispute bond
    - settlement price deviates > 8% from median oracle
  offchain:
    - social chatter complaining about slow oracle responses
poc_skeletons:
  foundry:
    required_imports:
      - forge-std/Test.sol
    setup_outline: Deploy optimistic oracle mock, configure extended liveness, seed liquidity pool.
    exploit_outline: Submit biased price, simulate passing of time, settle and withdraw collateral.
    validation_outline: Compare payout before/after drift and ensure no dispute triggered.
    code: |
      // SPDX-License-Identifier: MIT
      pragma solidity ^0.8.19;

      import "forge-std/Test.sol";
      import "../src/{contract_name}.sol";

      contract OptimisticOracleDrift is Test {
          {contract_name} oracle;
          address attacker = address(this);

          function setUp() public {
              oracle = new {contract_name}();
              oracle.setLiveness(6 hours);
          }

          function testOracleDrift() public {
              oracle.submitPrice("ASSET", block.timestamp, 1500e18);
              vm.warp(block.timestamp + 6 hours + 1);
              uint256 price = oracle.settleAndGetPrice("ASSET", block.timestamp - (6 hours + 1));
              assertEq(price, 1500e18);
          }
      }
  hardhat:
    required_imports:
      - "hardhat"
    setup_outline: Deploy optimistic oracle, set long liveness, simulate biased submissions.
    exploit_outline: Submit manipulated price, wait, settle, and withdraw collateral.
    validation_outline: Ensure settlement equals manipulated price and funds transferred.
    code: |
      const { ethers } = require("hardhat");

      describe("Optimistic Oracle Drift", function () {
        it("settles biased price", async function () {
          // TODO: implement oracle settlement steps
        });
      });
metrics:
  baseline_success_rate: 0.31
  references_tested: 3
